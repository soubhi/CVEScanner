package tests

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"vuln-scanner/database"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestScanHandler(t *testing.T) {
	database.InitDB() // Use an in-memory DB

	requestBody := `{
		"repo": "velancio/vulnerability_scans",
		"files": ["vulnscan15.json"]
	}`
	req, _ := http.NewRequest("POST", "/scan", bytes.NewBuffer([]byte(requestBody)))
	req.Header.Set("Content-Type", "application/json")

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(ScanHandler)
	handler.ServeHTTP(rr, req)

	assert.Equal(t, http.StatusOK, rr.Code, "Response should be 200 OK")
	var response map[string]interface{}
	json.Unmarshal(rr.Body.Bytes(), &response)

	assert.Equal(t, "Scan completed successfully", response["message"])
}

func TestQueryHandler(t *testing.T) {
	database.InitDB(":memory:")

	// Insert mock data
	_, err := database.DB.Exec(`INSERT INTO vulnerabilities (id, severity, package_name) VALUES ('CVE-2024-1234', 'HIGH', 'openssl')`)
	assert.NoError(t, err, "Test vulnerability should be inserted")

	requestBody := `{"filters": {"severity": "HIGH"}}`
	req, _ := http.NewRequest("POST", "/query", bytes.NewBuffer([]byte(requestBody)))
	req.Header.Set("Content-Type", "application/json")

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(QueryHandler)
	handler.ServeHTTP(rr, req)

	assert.Equal(t, http.StatusOK, rr.Code, "Response should be 200 OK")
	var response []map[string]interface{}
	json.Unmarshal(rr.Body.Bytes(), &response)

	assert.Len(t, response, 1, "Should return one vulnerability")
	assert.Equal(t, "CVE-2024-1234", response[0]["id"])
}
